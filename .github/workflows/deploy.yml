name: Build-Deploy
permissions:
  packages: write
  contents: write
on:
  push:
    branches: ["main"]


env:
  HUB_USER: alex129
  API_REPO: agent
  TAG_SHORT: 

jobs:
  build_and_push:
    runs-on: ubuntu-22.04
    if: ${{ github.event.workflow_run.conclusion != 'failure' }}
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Install golang
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          check-latest: true
      - run: go version
      - name: Install dependencies
        run: go mod tidy
      - name: Build
        run: GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags='-w -s' -o /agent/bin/tunnelbrokeragent cmd/main.go

      # - name: Install Compose
      #   uses: ndeloof/install-compose-action@v0.0.1
      #   with:
      #     legacy: true    # will also install in PATH as `docker-compose`
      # - run: docker-compose --version

      # - name: Login to Docker hub Container Registry
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKER_USER }}
      #     password: ${{ secrets.DOCKER_TOKEN }}


      # - name: Get current branch
      #   id: check_step
      #   run: |
      #     raw=$(git branch -r --contains ${{ github.ref }})
      #     branch=${raw##*/}
      #     echo "{name}=branch" >> $GITHUB_OUTPUT
      #     echo "Branch is $branch."

      # - name: Set tag env
      #   id: vars
      #   run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      #   # ${{ steps.vars.outputs.sha_short }}

      # - name: Build and push
      #   uses: docker/build-push-action@v5
      #   with:
      #     # context: ${{ env.API_REPO }}
      #     push: true
      #     tags: ${{ env.HUB_USER }}/${{ env.API_REPO }}:${{ steps.vars.outputs.sha_short }}

  deploy_via_ssh:
    needs: build_and_push
    runs-on: ubuntu-22.04
    if: ${{ github.event.workflow_run.conclusion != 'failure' }}
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Set tag env
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Show tag short
        run: export TAG_SHORT=${{ steps.vars.outputs.sha_short }}

      # Deploy 
      - name: copy file via ssh password
        uses: appleboy/scp-action@v0.1.7
        env:
          TAG_SHORT: ${{ steps.vars.outputs.sha_short }}
        with:
          host: ${{ secrets.VM_SSH_HOST }}
          username: ${{ secrets.VM_SSH_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          port: ${{ secrets.VM_SSH_PORT }}
          source: "/agent"
          target: /opt/6in4/agent/

      # Restart
      - name: restart agent
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_SSH_HOST }}
          username: ${{ secrets.VM_SSH_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          port: ${{ secrets.VM_SSH_PORT }}
          script: |
            chmod +x /opt/6in4/agent/bin/tunnelbrokeragent
            cp /opt/6in4/agent/tunnelbroker-agent.service /etc/systemd/system/tunnelbroker-agent.service
            systemctl daemon-reload
            systemctl restart tunnelbroker-agent.service
